OpenSSL
 
 
The OpenSSL Project has developed a open source toolkit implementing the Secure Sockets Layer (SSL v2/v3) and Transport Layer Security TLS (v1) protocols as well as a full-strength general purpose cryptography library.

OpenSSL is based on the SSLeay library developed by Eric A. Young and Tim J. Hudson. The OpenSSL toolkit is licensed under an Apache-style licence, which basically means that you are free to get and use it for commercial and non-commercial purposes subject to some simple license conditions.

The OpenSSL toolkit can be used to generate the keys that a web server (e.g. Apache) needs to encrypt the data sent between the client (browser) and the web server.
A simple overview of this process can be found here below:
A client browser connects to the Apache HTTP server via a Web request.

The browser asks to start a secure session with the server.

The server returns the site's certificate (= mobilefish.com_cert.pem) which also includes the server public key.

The browser analyzes the certificate and informs the user about its validity (e.g., was it issued by a recognized, trusted certificate authority?).

The browser creates a session key, which is encrypted with the server's public key, which is then sent to the server. This public or asymmetric key is generally 1024 bits. Much stronger public keys of 2048 bits could be provided but, perhaps for performance reasons, these are not in general use.

The server then decrypts this information using its private key (mobilefish.com_key.pem).

Both the browser and the server now are using the same session key. This is a symmetric key used to encrypt and decrypt data exchanged by the browser and server. Browsers and servers usually negotiate the strongest mutually supported session. This means that if the user's browser and your Web server both support 128-bit SSL sessions, a 128-bit session is established. If the user's browser only supports 40-bit SSL sessions, then a 40-bit session is established even if your Web server supports 128-bit sessions.

More information about the OpenSSL Project can be found at:
http://www.openssl.org

The latest OpenSSL version (no binary distributions) can be downloaded from:
http://www.openssl.org/source/

Links to OpenSSL binary distributions can be found at:
http://www.openssl.org/related/binaries.html

Source info: http://www.mobilefish.com/developer/openssl/openssl_quickguide_create_ca.html
------------------------------------------------------------------div------------------------------------------------------------------
Mostramos aqui a utilização da criptografia simétrica com a criptografia assimétrica, que referencia o material da comunicação OpenSSL.
Mostramos aqui a quarta propriedade da criptografia assimétrica que é a propriedade do sigilo das informações.

1 - O browser do cliente abre solicita uma sessão com servidor apache via uma requisição. Esta requisição naturalmente é solicitada sugerindo um canal seguro, isto é feito quando na URL de requisição contém geralmente o S de secure, sendo o HTTPS o mais normal.

2 - O servidor retorna a resposta ao cliente informando que a sessão fora aberta e junto a resposta contém também o certificado do site que está sendo acessado, tendo em vista que naturalmente o certificado irá conter a chave pública do site.

3 - O browser (normalmente em conjunto com o S.O.) verifica a validade e veracidade do certificado, caso o browser confirme que o certificado é válido, então o usuário é direcionado a navegação no site, caso o browser desconheça a veracidade do certificado, uma tela aparecerá para o cliente, informando que o site não é confiável e irá questionar se ainda assim o cliente deseja navegar neste site, ou seja, se o tal cliente confia no site.

4 - Tendo verificado a veracidade e validade do certificado do site visitado, ou mesmo apenas pela confiança que o usuário tem sobre o site visitado, o browser do cliente cria uma chave secreta, normalmente uma chave bastante grande, de tamnho de 1024 bits normalmente e o browser manté esta chave consigo pois será necessária para continuar a comunicação com o servidor. O servidor então precisa saber desta chave secreta e como o meio aberto não é seguro, o browser então criptografa a chave secreta criada pelo mesmo com a chave pública do site e então envia a chave secreta criptografada para o browser. Como a chave secreta fora criptografada com a chave pública do site então só o mesmo poderá descriptografar a chave secreta criada pelo browser com a chave privada correspondente que é mantida pelo próprio servidor do site.

5 - Agora tanto o browser quanto o servidor conhecem uma chave secreta e a comunicação a partir deste momento é feita com a criptografia simétrica de toda mensagem trocada entre estes dois, um exemplo de criptografia simétrica é o RC4 ou o DES, dentre outros bons cifradores.

Conclusão: Este é um exemplo de como dois computadores remotos estabelecem uma comunicação segura em um ambiente que as mensagens são trocadas livremente, ou seja, em um ambiente que de maneira nenhum é seguro por padrão. A dos dois modelos (assimétrico e simétrico) é necessário, pois as operações para cifragem e decifragem de uma mensagem utilizando a estrutura de chaves públicas são pesadas. O problema da comunicação simétrica seria estabelecer a chave secreta de comunicação, que é feito com a criptografia assimétrica como fora explicado. Desta maneira garantimos autenticidade de quem estamos nos comunicando e garantimos a segurança da comunicação.